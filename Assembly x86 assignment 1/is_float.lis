     1                                  ;******************************************************************************************
     2                                  ; Program name: Input floats                                                              *
     3                                  ; Programming Language: x86 Assembly                                                      *
     4                                  ; Program Description: The programs prompts the user to enter two floats and returns the  *
     5                                  ;                      larger number from the assembly module and the smaller number from *
     6                                  ;                      the C++ module.                                                    *
     7                                  ;******************************************************************************************
     8                                  ; Authors Information:                                                                    *
     9                                  ; Name: Sergio Murguia                                                                    *
    10                                  ; Email: smurguia1@csu.fullerton.edu                                                      * 
    11                                  ; Institution: Cal State University - Fullerton                                           *
    12                                  ; Course: CSPC 240-01 240-02 Assembly Language                                            *
    13                                  ;******************************************************************************************
    14                                  ;********************************************************************************************
    15                                  ; Copyright (C) 20202 Sergio Murguia                                                        *
    16                                  ; This program is free software: you can redistribute it and/or modify it under the terms   * 
    17                                  ; of the GNU General Public License version 3 as published by the Free Software Foundation. * 
    18                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY  *
    19                                  ; without even the implied Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * 
    20                                  ; See the GNU General Public License for more details. A copy of the GNU General Public     *
    21                                  ; License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    22                                  ;                                                                                           *
    23                                  ;********************************************************************************************
    24                                  ; Program information                                                                       *
    25                                  ;   Program name: Float input                                                               *
    26                                  ;   Programming languages: one modules in X86, 2 modules in c++                             *
    27                                  ;   Files in this program: isfloat.cpp,driver.cpp,atof                                      *
    28                                  ;                                                                                           *
    29                                  ;********************************************************************************************
    30                                  ; This File                                                                                 *
    31                                  ;    Name:      is_float.asm                                                                *
    32                                  ;    Purpose:   This file accepts a users two float inputs and conoverts the strings to a   *
    33                                  ;               a float and displayes the larger float number and return the smaller float  *
    34                                  ;               to the driver module.                                                       *
    35                                  ;********************************************************************************************
    36                                  
    37                                  
    38                                  
    39                                  extern scanf
    40                                  extern printf 
    41                                  extern atof
    42                                  extern isFloat
    43                                  global twofloat
    44                                  
    45                                  section .data
    46                                  
    47 00000000 506C6561736520656E-     welcome_message db "Please enter two float seperated by whitespace. Press enter after the second input.",0
    47 00000009 7465722074776F2066-
    47 00000012 6C6F61742073657065-
    47 0000001B 726174656420627920-
    47 00000024 776869746573706163-
    47 0000002D 652E20507265737320-
    47 00000036 656E74657220616674-
    47 0000003F 657220746865207365-
    47 00000048 636F6E6420696E7075-
    47 00000051 742E00             
    48 00000054 257320257300            float_numbers db "%s %s",0
    49 0000005A 5468657365206E756D-     second_message db "These numbers where entered: %1.3lf and %1.3lf",10,0
    49 00000063 626572732077686572-
    49 0000006C 6520656E7465726564-
    49 00000075 3A2025312E336C6620-
    49 0000007E 616E642025312E336C-
    49 00000087 660A00             
    50 0000008A 546865206C61726765-     large_number db "The larger number is %1.5lf",10,0
    50 00000093 72206E756D62657220-
    50 0000009C 69732025312E356C66-
    50 000000A5 0A00               
    51 000000A7 62616420666C6F6174-     bad_message db "bad float",10,0
    51 000000B0 0A00               
    52 000000B2 546869732061737365-     endprogram db "This assembly module will now return execution to the driver module.",10,0
    52 000000BB 6D626C79206D6F6475-
    52 000000C4 6C652077696C6C206E-
    52 000000CD 6F772072657475726E-
    52 000000D6 20657865637574696F-
    52 000000DF 6E20746F2074686520-
    52 000000E8 647269766572206D6F-
    52 000000F1 64756C652E0A00     
    53 000000F8 54686520736D616C6C-     endprogram2 db "The smaller number will be returned to the driver.",10,0
    53 00000101 6572206E756D626572-
    53 0000010A 2077696C6C20626520-
    53 00000113 72657475726E656420-
    53 0000011C 746F20746865206472-
    53 00000125 697665722E0A00     
    54                                  
    55                                  Section .bss
    56                                  
    57                                  
    58                                  section .text
    59                                  twofloat:
    60                                  
    61 00000000 55                      push rbp
    62 00000001 4889E5                  mov rbp,rsp
    63 00000004 57                      push rdi
    64 00000005 56                      push rsi
    65 00000006 52                      push rdx
    66 00000007 51                      push rcx
    67 00000008 4150                    push r8
    68 0000000A 4151                    push r9
    69 0000000C 4152                    push r10
    70 0000000E 4153                    push r11
    71 00000010 4154                    push r12
    72 00000012 4155                    push r13
    73 00000014 4156                    push r14
    74 00000016 4157                    push r15
    75 00000018 53                      push rbx 
    76 00000019 9C                      pushf
    77                                  
    78                                  
    79                                  ;========Display Welcome message Asking for users inputs================================================================
    80 0000001A B800000000              mov rax,0
    81 0000001F 48BF-                   mov rdi,welcome_message
    81 00000021 [0000000000000000] 
    82 00000029 E8(00000000)            call printf
    83                                  
    84                                  
    85                                  ;========Users two inputs===============================================================================================
    86                                  
    87 0000002E 4881EC00080000          sub rsp, 2048
    88 00000035 B800000000              mov rax,0
    89 0000003A 48BF-                   mov rdi,float_numbers
    89 0000003C [5400000000000000] 
    90 00000044 4889E6                  mov rsi, rsp
    91 00000047 4889E2                  mov rdx, rsp
    92 0000004A 4881C200040000          add rdx, 1024
    93 00000051 4989E7                  mov r15, rsp
    94 00000054 4989D6                  mov r14, rdx
    95 00000057 E8(00000000)            call scanf
    96                                  
    97                                  ;check if first string is bad input
    98 0000005C B800000000              mov rax, 0
    99 00000061 4C89FF                  mov rdi, r15
   100 00000064 E8(00000000)            call isFloat
   101 00000069 4883F800                cmp rax, 0
   102 0000006D 0F8492000000            je BadMessage
   103                                  
   104                                  ; validate second float
   105 00000073 B800000000              mov rax, 0
   106 00000078 4C89F7                  mov rdi, r14
   107 0000007B E8(00000000)            call isFloat
   108 00000080 4883F800                cmp rax, 0
   109 00000084 747F                    je BadMessage
   110                                  
   111                                  ;is a float, convert to float (first float)
   112 00000086 B800000000              mov rax, 0
   113 0000008B 4C89F7                  mov rdi, r14
   114 0000008E E8(00000000)            call atof
   115 00000093 F2440F10F0              movsd xmm14, xmm0
   116                                  
   117 00000098 B800000000              mov rax, 0
   118 0000009D 4C89FF                  mov rdi, r15
   119 000000A0 E8(00000000)            call atof
   120 000000A5 F2440F10F8              movsd xmm15, xmm0
   121                                  
   122                                  
   123                                  ;========Display users two inputs=======================================================================================
   124                                  
   125 000000AA B802000000              mov rax,2
   126 000000AF 48BF-                   mov rdi,second_message
   126 000000B1 [5A00000000000000] 
   127 000000B9 F2410F10C7              movsd xmm0,xmm15
   128 000000BE F2410F10CE              movsd xmm1,xmm14
   129 000000C3 E8(00000000)            call printf
   130                                  
   131 000000C8 66450F2EF7              ucomisd xmm14,xmm15
   132 000000CD 770C                    ja greater
   133 000000CF F2450F10DF              movsd xmm11, xmm15
   134 000000D4 F2450F10D6              movsd xmm10, xmm14
   135 000000D9 EB0A                    jmp continue
   136                                  greater:
   137 000000DB F2450F10DE              movsd xmm11,xmm14
   138 000000E0 F2450F10D7              movsd xmm10,xmm15
   139                                      
   140                                   
   141                                  continue:
   142 000000E5 B801000000              mov rax,1
   143 000000EA 48BF-                   mov rdi, large_number
   143 000000EC [8A00000000000000] 
   144 000000F4 F2410F10C3              movsd xmm0,xmm11
   145 000000F9 E8(00000000)            call printf
   146 000000FE F2410F10C2              movsd xmm0,xmm10
   147                                  
   148                                  
   149                                  
   150                                  
   151 00000103 EB16                    jmp end
   152                                  
   153                                  BadMessage:
   154 00000105 48C7C0FFFFFFFF          mov rax, -1
   155 0000010C 48BF-                   mov rdi, bad_message
   155 0000010E [A700000000000000] 
   156 00000116 E8(00000000)            call printf
   157                                  ;print "bad"
   158                                  end:
   159 0000011B 4881C400080000          add rsp, 2048
   160                                  ;xorpd xmm0,xmm0
   161                                  ;========Compare users two inputs===================================================================================
   162                                  
   163                                  
   164                                  
   165                                  
   166                                  ;=========Display large number===================================================================
   167                                  
   168                                  
   169                                  
   170                                  
   171                                  
   172                                  ;=========display the goodbye messages========================================================
   173                                  
   174                                  
   175                                  
   176                                  ;======================================================================================================================
   177 00000122 9D                      popf
   178 00000123 5B                      pop rbx
   179 00000124 415F                    pop r15
   180 00000126 415E                    pop r14
   181 00000128 415D                    pop r13
   182 0000012A 415C                    pop r12
   183 0000012C 415B                    pop r11
   184 0000012E 415A                    pop r10
   185 00000130 4159                    pop r9
   186 00000132 4158                    pop r8
   187 00000134 59                      pop rcx
   188 00000135 5A                      pop rdx
   189 00000136 5E                      pop rsi
   190 00000137 5F                      pop rdi
   191 00000138 5D                      pop rbp
   192                                  
   193 00000139 C3                      ret 
